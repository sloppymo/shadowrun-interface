"use strict";exports.id=76,exports.ids=[76],exports.modules={76:(e,t,s)=>{s.a(e,async(e,n)=>{try{s.d(t,{FW:()=>r,du:()=>ShadowrunWebSocket});var o=s(9648),c=e([o]);o=(c.then?(await c)():c)[0];let a=process.env.NEXT_PUBLIC_API_URL||"http://localhost:5000",i=o.default.create({baseURL:a,timeout:1e4,headers:{"Content-Type":"application/json"}});i.interceptors.request.use(e=>{let t=localStorage.getItem("shadowrun-session-token");return t&&(e.headers.Authorization=`Bearer ${t}`),e},e=>Promise.reject(e)),i.interceptors.response.use(e=>e,e=>(console.error("API Error:",e.response?.data||e.message),Promise.reject(e)));let r={async createSession(e,t=6){let s=await i.post("/sessions",{name:e,maxPlayers:t});return s.data},async joinSession(e,t){let s=await i.post(`/sessions/${e}/join`,{password:t});return s.data},async leaveSession(e){await i.post(`/sessions/${e}/leave`)},async getActiveSessions(){let e=await i.get("/sessions");return e.data},async getSessionInfo(e){let t=await i.get(`/sessions/${e}`);return t.data}};let ShadowrunWebSocket=class ShadowrunWebSocket{connect(e,t,s){this.sessionId=e,this.onMessageCallback=t,this.onConnectionCallback=s;let n=`${a.replace("http","ws")}/ws/${e}`;try{this.ws=new WebSocket(n),this.ws.onopen=()=>{console.log("WebSocket connected"),this.reconnectAttempts=0,this.onConnectionCallback?.(!0)},this.ws.onmessage=e=>{try{let t=JSON.parse(e.data);this.onMessageCallback?.(t)}catch(e){console.error("Failed to parse WebSocket message:",e)}},this.ws.onclose=()=>{console.log("WebSocket disconnected"),this.onConnectionCallback?.(!1),this.attemptReconnect()},this.ws.onerror=e=>{console.error("WebSocket error:",e)}}catch(e){console.error("Failed to create WebSocket connection:",e),this.onConnectionCallback?.(!1)}}attemptReconnect(){this.reconnectAttempts<this.maxReconnectAttempts&&this.sessionId&&(this.reconnectAttempts++,console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`),setTimeout(()=>{this.sessionId&&this.onMessageCallback&&this.connect(this.sessionId,this.onMessageCallback,this.onConnectionCallback)},this.reconnectDelay*this.reconnectAttempts))}send(e){this.ws&&this.ws.readyState===WebSocket.OPEN?this.ws.send(JSON.stringify(e)):console.warn("WebSocket not connected, cannot send message")}disconnect(){this.ws&&(this.ws.close(),this.ws=null),this.sessionId=null,this.onMessageCallback=void 0,this.onConnectionCallback=void 0}isConnected(){return this.ws?.readyState===WebSocket.OPEN}constructor(){this.ws=null,this.sessionId=null,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.reconnectDelay=1e3}};n()}catch(e){n(e)}})}};